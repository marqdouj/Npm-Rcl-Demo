@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject MapAuthentication MapAuthentication

<div id="@mapId" class="@Class" style="@Style"></div>

<style>
    .mapDiv {
        height: 400px;
        width: 400px;
    }
</style>

@code {
    private string mapId = string.Empty;

    [Parameter]
    public string? Class { get; set; } = "mapDiv";

    [Parameter]
    public string? MapId { get; set; }

    [Parameter]
    public string? Style { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            mapId = string.IsNullOrWhiteSpace(MapId) ? "mapDemo" : MapId.Trim();
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("azMaps.Core.addMap", mapId, MapAuthentication);
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(mapId))
                return;

            await JSRuntime.InvokeVoidAsync("azMaps.Core.removeMap", mapId);
        }
        catch (JSDisconnectedException)
        {
        }
    }
}